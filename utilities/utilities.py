import cv2
import os
from roboflow import Roboflow
import logging
import sys
import numpy as np
import shutil



# Setting the basic configuration of the log file to write to a file and to the console
logging.basicConfig(
    handlers=[logging.StreamHandler(sys.stdout)],
    level=logging.INFO,
    format="[%(asctime)s] %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logging.getLogger().setLevel("INFO")

def rename_files_in_dir(dir_path:str, txt_to_remove:str,txt_to_insert:str):
    """Rename files in directory.

    Args:
        dir_path (str): _description_
        txt_to_remove (str): _description_
        txt_to_insert (str): _description_
    """
    for filename in os.listdir(dir_path):
        full_file_path = os.path.join(dir_path,filename)
        os.rename(full_file_path, full_file_path.replace(txt_to_remove, txt_to_insert))


def convert_mp4_to_jpg(dir_path:str, txt_to_remove:str = '.mp4',txt_to_insert:str = ''):
    """Converts MP4s to JPGs.

    Args:
        dir_path (str): directory path to MP4 clips
        txt_to_remove (str): _description_
        txt_to_insert (str): _description_
    """
    # Read the video from specified path
    for filename in os.listdir(dir_path):
        logging.info(f"Filename: {filename}")
        cam = cv2.VideoCapture(os.path.join(dir_path,filename))
        
        try:
            #Temporary fix for weird file names generated by Adobe
            updated_filename = filename.replace(txt_to_remove,txt_to_insert)
            # creating a folder named data
            new_folder_path = os.path.join(dir_path,updated_filename)
            logging.info(f"Path to file: {new_folder_path}")
            if not os.path.exists(new_folder_path):
                os.makedirs(new_folder_path)
        
        # if not created then raise error
        except OSError:
            logging.error('Error: Creating directory of data')
        
        # frame
        currentframe = 0
        
        while(True):
            # reading from frame
            ret,frame = cam.read()
            
            if ret:
                # if video is still left continue creating images
                name = './'+ new_folder_path +'/frame_' + str(currentframe) + '.jpg'
                logging.info('Creating...' + name)
        
                # writing the extracted images
                cv2.imwrite(name, frame)
        
                # increasing counter so that it will
                # show how many frames are created
                currentframe += 1
            else:
                break
        
        # Release all space and windows once done
        cam.release()
        cv2.destroyAllWindows()
        

def get_roboflow_data(data_version,api_key:str = "E1UAwvyKe8uHH4eJGFid" ,workspace:str = "slalom",project:str = "tennis-object-detection",data_format:str = "yolov8"):
    """Get dataset from Roboflow.

    Args:
        data_version (str): _description_. 
        api_key (str, optional): _description_. Defaults to "E1UAwvyKe8uHH4eJGFid".
        workspace (str, optional): _description_. Defaults to "slalom".
        project (str, optional): _description_. Defaults to "tennis-object-detection".
        data_format (str, optional): _description_. Defaults to "yolov8".
    """
    
    rf = Roboflow(api_key=api_key)
    project = rf.workspace(workspace).project(project)
    dataset = project.version(data_version).download(data_format)
    return dataset

def fcount(path, exts=[".jpg"]):
    count=0    
    exts=[e.lower() for e in exts]
    for root, dirs, files in os.walk(path):
        for d in dirs:
            p=os.path.join(root, d)
            ff=[fn for fn in os.listdir(p) if any(fn.lower().endswith(e) for e in exts) ]
            if ff:
                count+=len(ff)

    return count 

def get_random_sample(read_path,write_path = "videos/clips/sample_photos/sample_atp_rallies",sub_sample = 0.05):
    # list all files in dir
    if not os.path.exists(write_path):
        os.makedirs(write_path)
    files = [f for f in os.listdir(read_path) if os.path.isfile(os.path.join(read_path,f))]

    # select sub-sample of the files randomly 
    random_files = np.random.choice(files, int(len(files)*sub_sample))
    files = [shutil.copy(os.path.join(read_path,file),write_path) for file in random_files]

def main():
    """Performs a test-run for local testing"""
    #rename_files_in_dir('/Users/levihuddleston/Documents/Clips/australia',"austrailia_open_semi_final","australian_open","sample_atp_rallies")
    #get_roboflow_data(2)
    # clips = ['australian_open','laver_cup','paris_masters','roland_garros']
    # for clip in clips:
    #     convert_mp4_to_jpg(os.path.join('videos/clips/',clip))
    # num_jpgs = fcount('videos/clips/)
    # print(num_jpgs)
    base_path = "videos/clips/sample_atp_rallies"
    directory_list = [os.path.join(base_path,d) for d in os.listdir(base_path) if os.path.isdir(os.path.join(base_path,d))]
    for directory_path in directory_list:
        get_random_sample(directory_path)

if __name__ == "__main__":
    main()